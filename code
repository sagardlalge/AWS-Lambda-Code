AWS Training Scripts 
========****========

#!/bin/bash
yum install httpd -y
echo "<h1> welcome to AWS website Server </h1>" > /var/www/html/index.html
systemctl restart httpd
systemctl enable httpd

--------------------------------------------------------------------------------
Order server

#!/bin/bash
yum install httpd -y
echo '<h1>This is Application Load Balance </h1>' > /var/www/html/index.html
mkdir /var/www/html/order
echo '<h1>This is from order server </h1>' > /var/www/html/order/index.html
systemctl restart httpd
systemctl enable httpd

-------------------------------------------------------------------------------
payment server

#!/bin/bash
yum install httpd -y
echo '<h1>This is Application Load Balance </h1>' > /var/www/html/index.html
mkdir /var/www/html/payment
echo '<h1>This is from Payment server </h1>' > /var/www/html/payment/index.html
systemctl restart httpd
systemctl enable httpd
====================================================================================
#!/bin/bash
yum install httpd -y
echo "<h1> This is Network Load Balancer on 80 Port </h1>" > /var/www/html/index.html
systemctl restart httpd
systemctl enable httpd
--------------------------------------------------------------------------------------
#!/bin/bash
yum install httpd -y
echo "<h1> This is Network Load Balancer on 8080 Port </h1>" > /var/www/html/index.html
systemctl restart httpd
systemctl enable httpd

================================================================================

auto scaling script (BaseServer)

#!/bin/bash
yum install httpd -y
systemctl start httpd
systemctl enable httpd
ec2instanceID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
ec2AZ=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)
echo "<h1> This is a base server with the details <br/> Hostname: $(hostname -f) <br/>instance ID: $ec2instanceID <br/> Availability Zone:$ec2AZ </h1>" > /var/www/html/index.html
systemctl restart httpd
systemctl enable httpd

--------------------------------------------------------------------------------------------------

#!/bin/bash
yum install httpd -y
systemctl start httpd
systemctl enable httpd
ec2instanceID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
ec2AZ=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)
echo "<h1> This is a AutoScaling server with the details <br/> Hostname: $(hostname -f) <br/>instance ID: $ec2instanceID <br/> Availability Zone:$ec2AZ </h1>" > /var/www/html/index.html
systemctl restart httpd
systemctl enable httpd
===================================================================================
how to increase CPU load in linux

run as root

# yes > /dev/null &   (cpu load 100% )

# killall yes  (to cancel)
=========================================================
EFS Mount command
===================

$ sudo yum install amazon-efs-utils -y
$ sudo mkdir efs
$ sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport fs-260267d1.efs.us-east-1.amazonaws.com:/ efs


Automatically mount your EFS file system. add the following line to the /etc/fstab file.

file-system-id:/ <efs-mount-point> <efs> <defaults,_netdev>  0  0

:wq

$ sudo mount -fav
$ df -h

==========================================================================
Lambda Function code:

- instances stop code

import boto3
region = 'us-east-1'
instances = ['i-08d0160600023c4fa', 'i-0227ede432bed6c6b']
ec2 = boto3.client('ec2', region_name=region)

def lambda_handler(event, context):
    ec2.stop_instances(InstanceIds=instances)
    print('stopped your instances: ' + str(instances))

================================================================
Lambda Function code:
- instances start code

import boto3
region = 'us-east-1'
instances = ['i-08d0160600023c4fa', 'i-0227ede432bed6c6b']
ec2 = boto3.client('ec2', region_name=region)

def lambda_handler(event, context):
    ec2.start_instances(InstanceIds=instances)
    print('started your instances: ' + str(instances))

================================================================

Lambda Function for dynamoDB code

import boto3
from uuid import uuid4
def lambda_handler(event, context):
    s3 = boto3.client("s3")
    dynamodb = boto3.resource('dynamodb')
    for record in event['Records']:
        bucket_name = record['s3']['bucket']['name']
        object_key = record['s3']['object']['key']
        size = record['s3']['object'].get('size', -1)
        event_name = record ['eventName']
        event_time = record['eventTime']
        dynamoTable = dynamodb.Table('SKYNET')
        dynamoTable.put_item(
            Item={'ID': str(uuid4()), 'Bucket': bucket_name, 'Object': object_key,'Size': size, 'Event': event_name, 'EventTime': event_time})


===========================================================================================

S3 access SNS policy rule
--------------------------


{
 "Version": "2012-10-17",
 "Id": "example-ID",
 "Statement": [
  {
   "Sid": "example-statement-ID",
   "Effect": "Allow",
   "Principal": {
    "AWS":"*"  
   },
   "Action": [
    "SNS:Publish"
   ],
   "Resource": "SNS-topic-ARN",
   "Condition": {
      "ArnLike": { "aws:SourceArn": "arn:aws:s3:::bucket-name" },
      "StringEquals": { "aws:SourceAccount": "bucket-owner-account-id" }
   }
  }
 ]
}

===========================================================
s3 access static web site rule

{
  "Version":"2012-10-17",
  "Statement":[
    {
      "Sid":"PublicRead",
      "Effect":"Allow",
      "Principal": "*",
      "Action":["s3:GetObject","s3:GetObjectVersion"],
      "Resource":["arn:aws:s3:::DOC-EXAMPLE-BUCKET/*"]
    }
  ]
}
----------------------------------------------------------------
